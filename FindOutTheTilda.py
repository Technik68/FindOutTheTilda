import tkinter as tk
from tkinter import messagebox, filedialog, Scrollbar, Text, Frame, Label, Button, Checkbutton, BooleanVar
import aiohttp
import asyncio
from bs4 import BeautifulSoup
from openpyxl import Workbook

input_file = ''
output_file = ''
sort_https_first = False  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏

def is_tilda_site(html):
    try:
        soup = BeautifulSoup(html, 'lxml')

        if soup.find('meta', {'name': 'generator', 'content': 'Tilda'}):
            return True
        if soup.find('link', {'href': lambda x: x and 'tildacdn.com' in x}):
            return True
        if soup.find_all(class_=lambda x: x and x.startswith('t-')):
            return True
        if 'This site was made on Tilda' in html:
            return True
        return False
    except Exception as e:
        return None

def is_wordpress_site(html):
    try:
        soup = BeautifulSoup(html, 'lxml')

        if soup.find('meta', {'name': 'generator', 'content': 'WordPress'}):
            return True
        if 'wp-content' in html:
            return True
        return False
    except Exception as e:
        return None

def is_wix_site(html):
    try:
        soup = BeautifulSoup(html, 'lxml')

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–∞—Ç–µ–≥–æ–≤ –∏–ª–∏ —Å—Å—ã–ª–æ–∫, –æ—Ç–Ω–æ—Å—è—â–∏—Ö—Å—è –∫ Wix
        if 'wix.com' in html or soup.find('meta', {'name': 'generator', 'content': 'Wix'}):
            return True
        return False
    except Exception as e:
        return None

def is_creatium_site(html):
    try:
        soup = BeautifulSoup(html, 'lxml')

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–∞—Ç–µ–≥–æ–≤ –∏–ª–∏ —Å—Å—ã–ª–æ–∫, –æ—Ç–Ω–æ—Å—è—â–∏—Ö—Å—è –∫ Creatium
        if 'creatium.com' in html or soup.find('meta', {'name': 'generator', 'content': 'Creatium'}):
            return True
        return False
    except Exception as e:
        return None

def is_bitrix24_site(html):
    try:
        soup = BeautifulSoup(html, 'lxml')

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–∞—Ç–µ–≥–æ–≤ –∏–ª–∏ —Å—Å—ã–ª–æ–∫, –æ—Ç–Ω–æ—Å—è—â–∏—Ö—Å—è –∫ Bitrix24
        if 'bitrix24' in html or soup.find('meta', {'name': 'generator', 'content': 'Bitrix24'}):
            return True
        return False
    except Exception as e:
        return None

def get_site_name(html):
    try:
        soup = BeautifulSoup(html, 'lxml')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º lxml –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        title = soup.find('title')
        return title.text.strip() if title else "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    except Exception as e:
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è"

async def fetch_url(session, url):
    try:
        async with session.get(url) as response:
            html = await response.text()
            return url, html
    except Exception as e:
        return url, None

async def check_all_urls(urls):
    async with aiohttp.ClientSession() as session:
        tasks = [fetch_url(session, url) for url in urls]
        return await asyncio.gather(*tasks)

def check_sites():
    urls = entry_urls.get("1.0", tk.END).splitlines()
    results_text.delete(1.0, tk.END)

    urls = [url.strip() for url in urls if url.strip()]

    if not urls:
        messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ –≤–≤–µ–¥–µ–Ω—ã URL.")
        return

    if only_http_var.get():
        urls = [url for url in urls if url.startswith("http://")]
    elif only_https_var.get():
        urls = [url for url in urls if url.startswith("https://")]

    async def process_urls():
        results = []
        site_data = []
        responses = await check_all_urls(urls)

        for url, html in responses:
            if html is None:
                status = "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏"
                site_name = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è"
                is_tilda = False
                is_wordpress = False
                is_wix = False
                is_creatium = False
                is_bitrix24 = False
            else:
                site_name = get_site_name(html)
                is_tilda = is_tilda_site(html)
                is_wordpress = is_wordpress_site(html)
                is_wix = is_wix_site(html)
                is_creatium = is_creatium_site(html)
                is_bitrix24 = is_bitrix24_site(html)

                if is_tilda:
                    status = "‚úÖ –ù–∞ Tilda"
                elif is_wordpress:
                    status = "üìù –ù–∞ WordPress"
                elif is_wix:
                    status = "üåê –ù–∞ Wix"
                elif is_creatium:
                    status = "‚öôÔ∏è –ù–∞ Creatium"
                elif is_bitrix24:
                    status = "üíº –ù–∞ –ë–∏—Ç—Ä–∏–∫—Å24"
                else:
                    status = "‚úçÔ∏è –†—É–∫–æ–ø–∏—Å–Ω—ã–π —Å–∞–π—Ç"

                if only_tilda_var.get() and not is_tilda:
                    continue

            site_data.append((url, site_name, status))

            result_line = f"{'-' * 60}\n"
            result_line += f"üìç URL: {url}\n"
            result_line += f"üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞: {site_name}\n"
            result_line += f"‚úÖ –°—Ç–∞—Ç—É—Å: {status}\n"
            result_line += f"{'-' * 60}\n\n"

            results_text.insert(tk.END, result_line)
            results.append(result_line)

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–æ—Ç–æ–∫–æ–ª—É (https, http)
        if sort_https_first_var.get():
            site_data.sort(key=lambda x: (x[0].startswith("https://"), x[0]))

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Excel
        if site_data:
            create_excel_report(site_data)

    asyncio.run(process_urls())

def bind_ctrl_v(event):
    event.widget.event_generate("<<Paste>>")

def select_input_file():
    global input_file
    input_file = filedialog.askopenfilename(filetypes=[("Text files", "*.txt")])
    if input_file:
        try:
            with open(input_file, 'r', encoding='utf-8') as f:
                urls = f.read().splitlines()
                entry_urls.delete('1.0', tk.END)
                entry_urls.insert(tk.END, "\n".join(urls))
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª: {e}")

def select_output_file():
    global output_file
    output_file = filedialog.asksaveasfilename(defaultextension=".txt",
                                               filetypes=[("Text files", "*.txt")])
    if not output_file:
        output_file = ''

def create_excel_report(site_data):
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ Excel-—Ñ–∞–π–ª–∞
    wb = Workbook()
    ws = wb.active

    # –ó–∞–¥–∞–µ–º –∏–º–µ–Ω–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
    ws.append(["–ö–æ–º–ø–∞–Ω–∏—è URL", "–ù–∞–∑–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞", "–°—Ç–∞—Ç—É—Å"])

    # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏
    for url, site_name, status in site_data:
        ws.append([url, site_name, status])

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ Excel-—Ñ–∞–π–ª–∞
    try:
        excel_file = filedialog.asksaveasfilename(defaultextension=".xlsx",
                                                  filetypes=[("Excel files", "*.xlsx")])
        if excel_file:
            wb.save(excel_file)
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {excel_file}")
        else:
            messagebox.showinfo("–û—Ç–º–µ–Ω–∞", "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ Excel –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    except Exception as e:
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç: {e}")

# –í–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
root = tk.Tk()
root.title('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–æ–≤ –Ω–∞ Tilda, Wix, WordPress, Creatium –∏ –ë–∏—Ç—Ä–∏–∫—Å24')

root.configure(bg="#E2E3DD")

# –ì–ª–∞–≤–Ω—ã–π —Ñ—Ä–µ–π–º –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
main_frame = Frame(root, bg="#E2E3DD")
main_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)

# –õ–µ–≤–∞—è —á–∞—Å—Ç—å —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ —á–µ–∫–±–æ–∫—Å–∞–º–∏
left_frame = Frame(main_frame, bg="#E2E3DD")
left_frame.pack(side=tk.LEFT, fill=tk.Y, padx=10, pady=10)

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ö–æ–¥–Ω–æ–≥–æ –∏ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–æ–≤
Button(left_frame, text="üìÇ –í—ã–±—Ä–∞—Ç—å –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª", command=select_input_file, bg="#C5C5B9", font=('Helvetica', 12)).pack(fill=tk.X, pady=5)
Button(left_frame, text="üíæ –í—ã–±—Ä–∞—Ç—å –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª", command=select_output_file, bg="#A09F8D", font=('Helvetica', 12)).pack(fill=tk.X, pady=5)

# –ß–µ–∫–±–æ–∫—Å—ã
only_tilda_var = BooleanVar()
Checkbutton(left_frame, text="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–∞–π—Ç—ã –Ω–∞ Tilda", variable=only_tilda_var, font=('Helvetica', 12), bg="#E2E3DD", anchor="w").pack(fill=tk.X, pady=5)

only_http_var = BooleanVar()
Checkbutton(left_frame, text="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ HTTP", variable=only_http_var, font=('Helvetica', 12), bg="#E2E3DD", anchor="w").pack(fill=tk.X, pady=5)

only_https_var = BooleanVar()
Checkbutton(left_frame, text="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ HTTPS", variable=only_https_var, font=('Helvetica', 12), bg="#E2E3DD", anchor="w").pack(fill=tk.X, pady=5)

# –ù–æ–≤—ã–π —á–µ–∫–±–æ–∫—Å –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
sort_https_first_var = BooleanVar()
Checkbutton(left_frame, text="–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å: —Å–Ω–∞—á–∞–ª–∞ HTTPS, –ø–æ—Ç–æ–º HTTP", variable=sort_https_first_var, font=('Helvetica', 12), bg="#E2E3DD", anchor="w").pack(fill=tk.X, pady=5)

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∞–π—Ç–æ–≤
Button(left_frame, text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å", command=check_sites, font=('Helvetica', 14), bg="#90caf9", fg="white").pack(fill=tk.X, pady=10)

# –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏
right_frame = Frame(main_frame, bg="#E2E3DD")
right_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True, padx=10, pady=10)

# –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ URL
Label(right_frame, text="–í–≤–µ–¥–∏—Ç–µ URL –≤ –±–ª–æ–∫ —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É:", font=('Helvetica', 14), bg="#E2E3DD", fg="#31312F").pack(anchor="w", pady=5)
entry_urls = Text(right_frame, height=10, font=('Courier', 12), wrap=tk.WORD, fg="#31312F", bg="#E5E1D8")
entry_urls.pack(fill=tk.BOTH, padx=10, pady=5)

# –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
Label(right_frame, text="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:", font=('Helvetica', 14), bg="#E2E3DD", fg="#31312F").pack(anchor="w", pady=5)

# –ë–ª–æ–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
results_text = Text(right_frame, height=20, font=('Courier', 12), wrap=tk.WORD, fg="#31312F", bg="#E5E1D8")
results_text.pack(fill=tk.BOTH, padx=10, pady=5)

root.mainloop()
